name: Deploy WordPress

on:
  push:
    branches:
      - master


jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Package repo
      run: |
        git archive --format=tar.gz -o app_$(date +"%Y-%m-%d").tar.gz HEAD
        
    - name: push to bucket
      run: |
       # mv app_$(date +%Y-%m-%d).tar.gz ${{ secrets.S3_BUCKET_NAME }}
       aws s3 cp app_$(date +"%Y-%m-%d").tar.gz s3://${{ secrets.S3_BUCKET_NAME }}/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }} 
    


  deploy:
    runs-on: ubuntu-latest
    needs: build 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: deploy to ASG
      run: |
        echo "Pushing to ASG"
        instance_ids=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name  ${{ secrets.ASG_NAME }}  --query 'AutoScalingGroups[].Instances[].InstanceId' --output text)
        echo $instance_ids
        echo "${{ secrets.EC2_KEY }}" > KEY_PEM && chmod 600 KEY_PEM
        cat KEY_PEM
        echo $instance_ids 
        
        # instance_ids=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name  ${{ secrets.ASG_NAME }} --query 'AutoScalingGroups[].Instances[].InstanceId' --output text)
        
        for instance_id in $instance_ids; do
          public_ip=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[].Instances[].PublicIpAddress' --output text)
  
          ssh -o StrictHostKeyChecking=no -i KEY_PEM ubuntu@$public_ip "
            cd /home/ubuntu
            aws s3 cp s3://${{ secrets.S3_BUCKET }}/app_$(date +"%Y-%m-%d").tar.gz  .
            sudo tar -xzvf app_$(date +"%Y-%m-%d").tar.gz
            sudo systemctl restart apache2
            "
        done
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        

        
    - name: Generate presigned URL for S3 object
      id: presigned_url
      run: |
         object_url=$(aws s3 presign s3://${{ secrets.S3_BUCKET }}/app_$(date +"%Y-%m-%d").tar.gz)
         echo "Object URL: $object_url"
         echo "::set-output name=url::$object_url"  # Set the URL as an output for later steps
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Open URL in browser
      if: success()
      run: |
         url="${{ steps.presigned_url.outputs.url }}"
         # curl -sSL "$url" | xdg-open /dev/stdin  # Open the URL in the default web browser
         xdg-open "$url" || echo "Unable to open URL"
         echo "$url"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}


    - name: Set S3 bucket expiry policy
      run: |
        aws s3api put-bucket-lifecycle-configuration --bucket ${{ secrets.S3_BUCKET }} --lifecycle-configuration '{"Rules":[{"ID":"DeleteObjectsAfter7Days","Prefix":"","Status":"Enabled","Expiration":{"Days":7}}]}'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
       
